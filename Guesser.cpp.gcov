        -:    0:Source:Guesser.cpp
        -:    0:Graph:Guesser.gcno
        -:    0:Data:Guesser.gcda
        -:    0:Runs:1
        -:    1:#include "Guesser.h"
        -:    2:#include <string>
        -:    3:#include <cstdlib> //Can use size_t
        -:    4:
        -:    5:using std::string;
        -:    6:
        -:    7:/*
        -:    8:  Returns an whole number representing the distance between the guess,
        -:    9:  provided as an argument, and the secret. The distance represents the number
        -:   10:  of characters that would have to be changed at the same location to match
        -:   11:  the other string. When the two strings are identical, the distance is 0,
        -:   12:  but for each letter different, the distance increases by 1. When the
        -:   13:  strings are different lengths, each of the extra characters in the longer
        -:   14:  string also counts as an increase in 1 to the distance, up to the length of
        -:   15:  the secret; in other words, if m_secret has a 10 characters and the guess
        -:   16:  has 100, the distance is 10.
        -:   17:*/
function _ZN7Guesser8distanceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 91%
       12:   18:unsigned int Guesser::distance(string guess){
       12:   19:  unsigned int distance = 0;
       12:   20:  size_t length = std::min(m_secret.length(), guess.length());
call    0 returned 12
call    1 returned 12
call    2 returned 12
        -:   21:
        -:   22:  //Compare to the smallest string 
      378:   23:  for (size_t i = 0; i < length; i++)
branch  0 taken 366
branch  1 taken 12 (fallthrough)
        -:   24:  {
      366:   25:    if (m_secret[i] != guess[i])
call    0 returned 366
call    1 returned 366
branch  2 taken 2 (fallthrough)
branch  3 taken 364
        -:   26:    {
        2:   27:      distance++;
        -:   28:    }
        -:   29:  }
        -:   30:
        -:   31:  //Handle for difference in length of strings
       12:   32:  if (guess.length() != m_secret.length())
call    0 returned 12
call    1 returned 12
branch  2 taken 8 (fallthrough)
branch  3 taken 4
        -:   33:  {
        8:   34:    distance += abs(int(m_secret.length()) - int(guess.length()));
call    0 returned 8
call    1 returned 8
        -:   35:  }
        -:   36:
        -:   37:  //Distance is capped out at the length of the secret string
       12:   38:  if (distance > m_secret.length())
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -:   39:  {
    #####:   40:    distance = m_secret.length();
call    0 never executed
        -:   41:  }
       12:   42:  return distance;
        -:   43:}
        -:   44:
        -:   45:/*
        -:   46:  Constructor requires that the secret phrase is provided its value as
        -:   47:  an argument. This secret will not change for the lifespan of an instance
        -:   48:  of any Guesser object and must have a length of 32 characters or less,
        -:   49:  otherwise, it will be truncated at that length.
        -:   50:*/
function _ZN7GuesserC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 75%
        8:   51:Guesser::Guesser(string secret)
call    0 returned 8
        -:   52:{
        -:   53:  //Need to truncate if longer than 32
        8:   54:  if (secret.length() > 32)
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        -:   55:  {
        8:   56:    m_secret = secret.substr(0, 32);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 8
call    4 returned 8
        -:   57:  }
        -:   58:
        -:   59:  else
    #####:   60:    m_secret = secret;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   61:  
        8:   62:  m_remaining = 3;
        8:   63:}
call    0 never executed
        -:   64:
        -:   65:/*
        -:   66:  Determines and returns whether the provided guess matches the secret
        -:   67:  phrase. However, the function also returns false if the secret is locked,
        -:   68:  which happens if either (or both): 
        -:   69:    (A) there are no remaining guesses allowed
        -:   70:    (B) the function detects brute force, as indicated by a guess that has a
        -:   71:        distance greater than 2 from the secret
        -:   72:  See the remaining() and distance() functions for specifications regarding
        -:   73:  determining how many guesses are remaining and the distance between a guess
        -:   74:  and the secret.
        -:   75:*/
function _ZN7Guesser5matchENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13 returned 100% blocks executed 86%
       13:   76:bool Guesser::match(string guess)
        -:   77:{
        -:   78:  //Accounts for user locked out so just return false
       13:   79:  if (m_remaining == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        -:   80:  {
        1:   81:    return false;
        -:   82:  }
        -:   83:
       12:   84:  unsigned int dist = distance(guess);
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 12
call    7 never executed
        -:   85:
        -:   86:  //User got the correct answer
       12:   87:  if (dist == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 10
        -:   88:  {
        2:   89:    m_remaining = 3;
        2:   90:    return true;
        -:   91:  }
        -:   92:
        -:   93:  //Accounts for bruteforcing by locking out users that have guesses greater than 2
       10:   94:  else if (dist > 2)
branch  0 taken 3 (fallthrough)
branch  1 taken 7
        -:   95:  {
        3:   96:    m_remaining = 0;
        3:   97:    return false;
        -:   98:  }
        -:   99:  
        -:  100:  //Distance is less than 2 so guesses just decrements
        -:  101:  else
        -:  102:  {
        7:  103:    m_remaining--;
        -:  104:  }
        -:  105:
        7:  106:  return false;
        -:  107:}
        -:  108:
        -:  109:/*
        -:  110:  Returns the number of guesses remaining. A Guesser object allows up to
        -:  111:  three (3) consecutive guesses without a match. If three guesses are made
        -:  112:  without any being a true match, the secret is locked. However, whenever
        -:  113:  an unlocked secret is guessed with a true match, the guesses remaining
        -:  114:  reset to three (3).
        -:  115:*/
function _ZN7Guesser9remainingEv called 9 returned 100% blocks executed 100%
        9:  116:unsigned int Guesser::remaining()
        -:  117:{
        9:  118:  return m_remaining;
        -:  119:}
        -:  120:
